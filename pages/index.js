import Head from "next/head";
import { LoadingOutlined } from "@ant-design/icons";
import Navigation from "../components/Layout/header";
import Style from "../styles/home.module.scss";
import JobsByFunction from "../components/Jobs/jobsByFunction";
import { Row, Col, Tabs, Link, Spin } from "antd";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import getUserType from "../shared/userType";
import { FetchSelectLookup } from "../shared/fetch_select_lookup";
import { getJobsByFilter } from "../stores/apis/jobs_api";
import { useMutation, useQuery } from "react-query";
import { useToasts } from "react-toast-notifications";
import {
  getJobByCity,
  getJobByCompany,
  getJobByIndustry,
} from "../stores/apis/lookup_api";

export default function Home() {
  const { TabPane } = Tabs;
  const router = useRouter();
  const { addToast } = useToasts();
  const [jobTitle, setJobTitle] = useState("");
  const [city, setCity] = useState("");
  const [jobs, setJobs] = useState([]);
  const [userType, setUserType] = useState(
    typeof window !== "undefined" &&
    sessionStorage.getItem("jobhop_loggedin_user_type")
  );
  const { mutateAsync, isLoading, error, isSuccess } =
    useMutation(getJobsByFilter);

  const {
    isLoading: jobLoading,
    error: cityError,
    data: cityJob,
  } = useQuery("getJobByCity", () => getJobByCity());

  const {
    isLoading: companyLoading,
    error: companyError,
    data: companyJob,
  } = useQuery("getJobByCompany", () => getJobByCompany());

  const {
    isLoading: industryLoading,
    error: industryError,
    data: industryJob,
  } = useQuery("getJobByIndustry", () => getJobByIndustry());

  useEffect(() => {
    let _url = "/";
    if (getUserType() === "0") {
      _url = "/employboard";
      router.push(_url);
    } else if (userType == 1) {
      _url = "/dashboard";
      router.push(_url);
    }

    mutateAsync(
      {
        jobTitle: "",
        experience: "",
        salary: "",
        jobType: "",
        company: "",
        gender: "",
        city: "",
      },
      {
        onSuccess: async (responce) => {
          let _jobs = responce?.filter(
            (job) =>
              job.draft === false && new Date(job.lateDatetoApply) >= new Date()
          );
          let _arrangeJob = _jobs.map((item) => {
            return {
              title: item.lookUpValue,
              company: 1,
            };
          });
          responce && setJobs(_arrangeJob);
        },
        onError: (error) => {
          addToast("An Error Occured", {
            appearance: "error",
            autoDismiss: true,
          });
        },
      }
    );
  }, []);

  const selcteJobTitle = (value) => {
    setJobTitle(value);
  };
  const selectCityTitle = (value) => {
    setCity(value);
  };
  const handleSearchJob = () => {
    router.push(`/jobs?jobTitle=${jobTitle}&location=${city}`);
  };
  const redirectToJob = (title, id) => {
    let _url = `/jobs`;
    if (title === "industry") {
      _url += `?industry=${id}`;
    } else if (title === "city") {
      _url += `?location=${id}`;
    } else if (title === "company") {
      _url += `?company=${id}`;
    }
    router.push(_url);
  }
  return (
    <>
      <Head>
        <title>HOP-Jobs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Navigation />
        <div className={Style.homeBanner}>
          <div>
            <h2>A new opportunity awaits you</h2>
            <p>Search for a job now</p>
            <div className={Style.homeSearchBox}>
              <div className={Style.homeSearchBoxWrapper}>
                <div className={Style.SelectBox}>
                  <FetchSelectLookup
                    typeID={16}
                    onOptionSelect={selcteJobTitle}
                    defaultValue="Job Title"
                    bordered={false}
                  />
                </div>
                {/* <input placeholder="Job Title" /> */}
                <div className={Style.bdr} />
                <div className={Style.SelectBox}>
                  <FetchSelectLookup
                    typeID={3}
                    onOptionSelect={selectCityTitle}
                    defaultValue="Location"
                    bordered={false}
                  />
                </div>
              </div>
              <button
                className={`${Style.btn} ${Style.searchBtn} ${Style.btnDesktop}`}
                onClick={handleSearchJob}
              >
                Search Jobs
              </button>
            </div>
            <button
              className={`${Style.btn} ${Style.searchBtn} ${Style.btnMobile}`}
              onClick={handleSearchJob}
            >
              Search Jobs
            </button>
          </div>
        </div>
      </main>

      <main>
        <Col lg={{ span: 18, offset: 3 }} md={{ span: 22, offset: 1 }} sm={{ span: 22, offset: 1 }} xs={{ span: 24 }}>
          <div className={Style.homeJobsSection}>
            <h2 className={Style.jobsHeading}>Jobs in Libya</h2>
            <div className="homePageTabs">
              {!isLoading ? (
                <Tabs defaultActiveKey="1">
                  {/* <TabPane tab="BY FUNCTION" key="1">
                    <JobsByFunction jobs={jobs} />
                  </TabPane> */}
                  <TabPane tab="BY INDUSTRY" key="2">
                    <JobsByFunction jobs={industryJob} title={"industry"} />
                  </TabPane>
                  <TabPane tab="BY CITY" key="3">
                    <JobsByFunction jobs={cityJob} title={"city"} />
                  </TabPane>
                  <TabPane tab="BY COMPANY" key="4">
                    <JobsByFunction jobs={companyJob} title={"company"} />
                  </TabPane>
                </Tabs>
              ) : (
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    padding: "30px",
                  }}
                >
                  <Spin
                    size="large"
                    indicator={
                      <LoadingOutlined style={{ fontSize: 24 }} spin />
                    }
                  />
                </div>
              )}
            </div>
          </div>
        </Col>
      </main>

      <main>
        <Col lg={{ span: 16, offset: 4 }} xs={{ offset: 1 }}>
          <div className={Style.homeFooter}>
            <Row>
              <Col lg={8}>
                <h2>LMIS</h2>
              </Col>
              <Col lg={16}>
                <Row>
                  {/* <Col lg={6}>
                    <h3>By Function</h3>
                    <ul>

                      <li>
                        <a href="#">Operations</a>
                      </li>
                      <li>
                        <a href="#">Retail</a>
                      </li>
                      <li>
                        <a href="#">Marketing</a>
                      </li>
                      <li>
                        <a href="#">Administration</a>
                      </li>
                      <li>
                        <a href="#">Engineering</a>
                      </li>
                    </ul>
                  </Col> */}
                  <Col lg={6}>
                    <h3>By Industry</h3>
                    <ul>
                      {industryJob?.map((industry) =>
                        <li
                          key={Math.random()}
                        >
                          <a onClick={() => redirectToJob('industry', industry.id)}>{industry.title}</a>
                        </li>
                      )}
                    </ul>
                  </Col>
                  <Col lg={6}>
                    <h3>By City</h3>
                    <ul>
                      {cityJob?.map((city) =>
                        <li
                          key={Math.random()}
                        >
                          <a onClick={() => redirectToJob('city', city.id)}>{city.title}</a>
                        </li>
                      )}
                    </ul>
                  </Col>
                  <Col lg={6}>
                    <h3>By Company</h3>
                    <ul>
                      {companyJob?.map((company) =>
                        <li
                          key={Math.random()}
                        >
                          <a onClick={() => redirectToJob('company', company.id)}>{company.title}</a>
                        </li>
                      )}
                    </ul>
                  </Col>
                </Row>
              </Col>
            </Row>
          </div>
        </Col>
      </main>

      <footer className={Style.footerBar}>
        <p>2021 All rights reserved</p>
      </footer>
    </>
  );
}
