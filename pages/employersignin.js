import Head from "next/head";
import { Row, Col, Form, Input, Button } from "antd";
import { useMutation } from "react-query";
import { signInUsre } from "../stores/apis/auth_apis";
import { useRecoilState } from "recoil";
import { isLoggedIn } from "../stores/atoms/app_config_atom";
import { useRouter } from "next/router";
import { useToasts } from "react-toast-notifications";
import { useEffect } from "react";
import auth from "../shared/auth";

export default function Signup() {
  const [signin, setSignin] = useRecoilState(isLoggedIn);

  const { mutateAsync, isLoading, isSuccess } = useMutation(signInUsre);
  const router = useRouter();
  const { addToast } = useToasts();
  useEffect(() => {
    if (auth()) {
      router.push("/employboard");
    }
  }, []);
  const onSignIn = (values) => {
    // values.userType = 1;
    mutateAsync(values, {
      onSuccess: async (response) => {
        if (response.userId !== 0) {
          addToast("Logged in Successfully", {
            appearance: "success",
            autoDismiss: true,
          });
          typeof window !== "undefined" &&
            sessionStorage.setItem(
              "jobhop_loggedin_user",
              JSON.stringify(response)
            );
          typeof window !== "undefined" &&
            sessionStorage.setItem(
              "jobhop_loggedin_candidate_id",
              response.candidateID
            );
          typeof window !== "undefined" &&
            sessionStorage.setItem("jobhop_loggedin_user_type", 0);
          sessionStorage.setItem("userToken", response.token);
          sessionStorage.setItem("userType",0);
          sessionStorage.setItem("permissions", JSON.stringify(response.permissions));
          router.push("/employboard");
          setSignin(true);
        } else {
          addToast("User not found or Email or password does not match.", {
            appearance: "error",
            autoDismiss: true,
          });
        }
      },
    });
  };
  return (
    <>
      <Head>
        <title>Signup Employer</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main>
            <Form
              name="basic"
              layout="vertical"
              initialValues={{ remember: true }}
              onFinish={onSignIn}
              onFinishFailed={() => {}}
              style={{
                  width:"30%",
                  margin:'auto',
                  marginTop:'100px'
              }}
              autoComplete="off"
            >
              <Form.Item label="Email">
                <Form.Item
                  noStyle
                  name="userEmail"
                  validateTrigger="onSubmit"
                  rules={[{ required: true, type: "email" }]}
                >
                  <Input size="large" placeholder="bruce@wayne.com" />
                </Form.Item>
              </Form.Item>

              <Form.Item label="Password">
                <Form.Item
                  noStyle
                  name="password"
                  validateTrigger="onSubmit"
                  rules={[{ required: true, message: "Password is required" }]}
                >
                  <Input.Password size="large" placeholder="••••••••" />
                </Form.Item>
              </Form.Item>

              <Form.Item>
                <Button
                  type="primary"
                  loading={isLoading}
                  block
                  htmlType="submit"
                >
                  Login
                </Button>
              </Form.Item>
            </Form>
      </main>
    </>
  );
}
